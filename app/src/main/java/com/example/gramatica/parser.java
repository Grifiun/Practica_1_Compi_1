
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.gramatica;

import java_cup.runtime.*;
import com.example.gramatica.sym;
import com.example.gramatica.exercise;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

  public final Class getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] =
          unpackFromStrings(new String[] {
                  "\000\012\000\002\002\003\000\002\002\004\000\002\002" +
                          "\004\000\002\003\005\000\002\003\005\000\002\003\005" +
                          "\000\002\003\005\000\002\004\002\000\002\003\006\000" +
                          "\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table =
          unpackFromStrings(new String[] {
                  "\000\022\000\006\004\007\011\006\001\002\000\020\002" +
                          "\001\004\007\005\014\006\011\007\012\010\015\011\006" +
                          "\001\002\000\004\002\023\001\002\000\006\004\007\011" +
                          "\006\001\002\000\022\002\ufff8\004\ufff8\005\ufff8\006\ufff8" +
                          "\007\ufff8\010\ufff8\011\ufff8\012\ufff8\001\002\000\014\005" +
                          "\014\006\011\007\012\010\015\012\ufffa\001\002\000\006" +
                          "\004\007\011\006\001\002\000\006\004\007\011\006\001" +
                          "\002\000\004\012\020\001\002\000\006\004\007\011\006" +
                          "\001\002\000\006\004\007\011\006\001\002\000\022\002" +
                          "\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb" +
                          "\012\ufffb\001\002\000\022\002\ufffe\004\ufffe\005\ufffe\006" +
                          "\ufffe\007\012\010\015\011\ufffe\012\ufffe\001\002\000\022" +
                          "\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011" +
                          "\ufff9\012\ufff9\001\002\000\022\002\ufffc\004\ufffc\005\ufffc" +
                          "\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\001\002\000" +
                          "\022\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\012\010\015" +
                          "\011\ufffd\012\ufffd\001\002\000\004\002\000\001\002\000" +
                          "\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table =
          unpackFromStrings(new String[] {
                  "\000\022\000\006\002\004\003\003\001\001\000\006\002" +
                          "\023\003\003\001\001\000\002\001\001\000\004\003\007" +
                          "\001\001\000\002\001\001\000\004\004\012\001\001\000" +
                          "\004\003\021\001\001\000\004\003\020\001\001\000\002" +
                          "\001\001\000\004\003\016\001\001\000\004\003\015\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
  {
    action_obj = new CUP$parser$actions(this);
  }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
          int                        act_num,
          java_cup.runtime.lr_parser parser,
          java.util.Stack            stack,
          int                        top)
          throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public String resultado = " ";

  public parser(exercise lex){
    super(lex);
  }


  /** Cup generated class to encapsulate user supplied action code.*/
  @SuppressWarnings({"rawtypes", "unchecked", "unused"})
  class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
      this.parser = parser;
    }

    /** Method 0 with the actual generated action code for actions 0 to 300. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack            CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
      {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // s ::= producto
        {
          Object RESULT =null;
          int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

          System.out.println("PRODUCTO NUEVO ");
          resultado = p;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // $START ::= s EOF
        {
          Object RESULT =null;
          int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
          int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
          Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
          RESULT = start_val;
          CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        /* ACCEPT */
        CUP$parser$parser.done_parsing();
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // s ::= producto s
        {
          Object RESULT =null;
          int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
          int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
          String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
          System.out.println("PRODUCTO NUEVO ");
          CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // producto ::= producto SUMA producto
        {
          String RESULT =null;
          int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
          int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
          String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
          int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

          //System.out.print(" + ");
          Double num1 = Double.parseDouble(n1);
          Double num2 = Double.parseDouble(n2);
          Double aux = num1 + num2;
          RESULT = String.valueOf(aux);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("producto",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // producto ::= producto RESTA producto
        {
          String RESULT =null;
          int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
          int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
          String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
          int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

          //System.out.print(" - ");
          Double num1 = Double.parseDouble(n1);
          Double num2 = Double.parseDouble(n2);
          Double aux = num1 - num2;
          RESULT = String.valueOf(aux);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("producto",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // producto ::= producto MULTIPLICACION producto
        {
          String RESULT =null;
          int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
          int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
          String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
          int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

          //System.out.print(" * ");
          Double num1 = Double.parseDouble(n1);
          Double num2 = Double.parseDouble(n2);
          Double aux = num1 * num2;
          RESULT = String.valueOf(aux);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("producto",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // producto ::= producto DIVISION producto
        {
          String RESULT =null;
          int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
          int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
          String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
          int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

          //System.out.print(" / ");
          Double num1 = Double.parseDouble(n1);
          Double num2 = Double.parseDouble(n2);
          Double aux = num1 / num2;
          RESULT = String.valueOf(aux);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("producto",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // NT$0 ::=
        {
          String RESULT =null;
          int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

          //System.out.print(" ( )");
          RESULT = p;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // producto ::= PARENTESISA producto NT$0 PARENTESISB
        {
          String RESULT =null;
          // propagate RESULT from NT$0
          RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
          int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
          int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
          String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("producto",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // producto ::= ENTERO
        {
          String RESULT =null;
          int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

          //System.out.print(" Entero");
          RESULT = e.getLexema();

          CUP$parser$result = parser.getSymbolFactory().newSymbol("producto",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /* . . . . . .*/
        default:
          throw new Exception(
                  "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

      }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack            CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception
    {
      return CUP$parser$do_action_part00000000(
              CUP$parser$act_num,
              CUP$parser$parser,
              CUP$parser$stack,
              CUP$parser$top);
    }
  }

}