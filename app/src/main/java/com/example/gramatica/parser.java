
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package com.example.gramatica;

import java_cup.runtime.*;
import com.example.gramatica.sym;
import com.example.gramatica.exercise;
import com.example.DAO.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

  public final Class getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] =
          unpackFromStrings(new String[] {
                  "\000\024\000\002\002\004\000\002\002\003\000\002\002" +
                          "\004\000\002\003\015\000\002\003\015\000\002\003\017" +
                          "\000\002\003\017\000\002\003\021\000\002\003\014\000" +
                          "\002\003\003\000\002\005\005\000\002\005\005\000\002" +
                          "\005\005\000\002\005\005\000\002\006\002\000\002\005" +
                          "\006\000\002\005\003\000\002\005\004\000\002\004\003" +
                          "\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table =
          unpackFromStrings(new String[] {
                  "\000\134\000\010\003\006\023\004\024\005\001\002\000" +
                          "\014\016\047\017\051\020\045\021\050\022\046\001\002" +
                          "\000\004\025\013\001\002\000\012\002\ufff8\003\ufff8\023" +
                          "\ufff8\024\ufff8\001\002\000\012\002\000\003\006\023\004" +
                          "\024\005\001\002\000\004\002\011\001\002\000\004\002" +
                          "\001\001\002\000\004\002\uffff\001\002\000\004\026\014" +
                          "\001\002\000\004\011\015\001\002\000\010\004\021\006" +
                          "\016\011\020\001\002\000\010\004\021\006\016\011\020" +
                          "\001\002\000\014\005\026\006\023\007\024\010\027\013" +
                          "\035\001\002\000\010\004\021\006\016\011\020\001\002" +
                          "\000\016\005\ufff1\006\ufff1\007\ufff1\010\ufff1\012\ufff1\013" +
                          "\ufff1\001\002\000\014\005\026\006\023\007\024\010\027" +
                          "\012\ufff3\001\002\000\010\004\021\006\016\011\020\001" +
                          "\002\000\010\004\021\006\016\011\020\001\002\000\004" +
                          "\012\032\001\002\000\010\004\021\006\016\011\020\001" +
                          "\002\000\010\004\021\006\016\011\020\001\002\000\016" +
                          "\005\ufff4\006\ufff4\007\ufff4\010\ufff4\012\ufff4\013\ufff4\001" +
                          "\002\000\016\005\ufff7\006\ufff7\007\024\010\027\012\ufff7" +
                          "\013\ufff7\001\002\000\016\005\ufff2\006\ufff2\007\ufff2\010" +
                          "\ufff2\012\ufff2\013\ufff2\001\002\000\016\005\ufff5\006\ufff5" +
                          "\007\ufff5\010\ufff5\012\ufff5\013\ufff5\001\002\000\016\005" +
                          "\ufff6\006\ufff6\007\024\010\027\012\ufff6\013\ufff6\001\002" +
                          "\000\010\004\021\006\016\011\020\001\002\000\014\005" +
                          "\026\006\023\007\024\010\027\013\037\001\002\000\006" +
                          "\015\040\021\041\001\002\000\004\012\uffee\001\002\000" +
                          "\004\012\uffef\001\002\000\004\012\043\001\002\000\012" +
                          "\002\ufff9\003\ufff9\023\ufff9\024\ufff9\001\002\000\016\005" +
                          "\ufff0\006\ufff0\007\024\010\027\012\ufff0\013\ufff0\001\002" +
                          "\000\004\011\124\001\002\000\004\011\107\001\002\000" +
                          "\004\011\076\001\002\000\004\011\063\001\002\000\004" +
                          "\011\052\001\002\000\010\004\021\006\016\011\020\001" +
                          "\002\000\014\005\026\006\023\007\024\010\027\013\054" +
                          "\001\002\000\010\004\021\006\016\011\020\001\002\000" +
                          "\014\005\026\006\023\007\024\010\027\013\056\001\002" +
                          "\000\010\004\021\006\016\011\020\001\002\000\014\005" +
                          "\026\006\023\007\024\010\027\013\060\001\002\000\004" +
                          "\014\061\001\002\000\004\012\062\001\002\000\012\002" +
                          "\ufffd\003\ufffd\023\ufffd\024\ufffd\001\002\000\010\004\021" +
                          "\006\016\011\020\001\002\000\014\005\026\006\023\007" +
                          "\024\010\027\013\065\001\002\000\010\004\021\006\016" +
                          "\011\020\001\002\000\014\005\026\006\023\007\024\010" +
                          "\027\013\067\001\002\000\010\004\021\006\016\011\020" +
                          "\001\002\000\014\005\026\006\023\007\024\010\027\013" +
                          "\071\001\002\000\010\004\021\006\016\011\020\001\002" +
                          "\000\014\005\026\006\023\007\024\010\027\013\073\001" +
                          "\002\000\004\014\074\001\002\000\004\012\075\001\002" +
                          "\000\012\002\ufffb\003\ufffb\023\ufffb\024\ufffb\001\002\000" +
                          "\010\004\021\006\016\011\020\001\002\000\014\005\026" +
                          "\006\023\007\024\010\027\013\100\001\002\000\010\004" +
                          "\021\006\016\011\020\001\002\000\014\005\026\006\023" +
                          "\007\024\010\027\013\102\001\002\000\010\004\021\006" +
                          "\016\011\020\001\002\000\014\005\026\006\023\007\024" +
                          "\010\027\013\104\001\002\000\004\014\105\001\002\000" +
                          "\004\012\106\001\002\000\012\002\ufffe\003\ufffe\023\ufffe" +
                          "\024\ufffe\001\002\000\010\004\021\006\016\011\020\001" +
                          "\002\000\014\005\026\006\023\007\024\010\027\013\111" +
                          "\001\002\000\010\004\021\006\016\011\020\001\002\000" +
                          "\014\005\026\006\023\007\024\010\027\013\113\001\002" +
                          "\000\010\004\021\006\016\011\020\001\002\000\014\005" +
                          "\026\006\023\007\024\010\027\013\115\001\002\000\010" +
                          "\004\021\006\016\011\020\001\002\000\014\005\026\006" +
                          "\023\007\024\010\027\013\117\001\002\000\010\004\021" +
                          "\006\016\011\020\001\002\000\014\005\026\006\023\007" +
                          "\024\010\027\013\121\001\002\000\004\014\122\001\002" +
                          "\000\004\012\123\001\002\000\012\002\ufffa\003\ufffa\023" +
                          "\ufffa\024\ufffa\001\002\000\010\004\021\006\016\011\020" +
                          "\001\002\000\014\005\026\006\023\007\024\010\027\013" +
                          "\126\001\002\000\010\004\021\006\016\011\020\001\002" +
                          "\000\014\005\026\006\023\007\024\010\027\013\130\001" +
                          "\002\000\010\004\021\006\016\011\020\001\002\000\014" +
                          "\005\026\006\023\007\024\010\027\013\132\001\002\000" +
                          "\010\004\021\006\016\011\020\001\002\000\014\005\026" +
                          "\006\023\007\024\010\027\013\134\001\002\000\004\014" +
                          "\135\001\002\000\004\012\136\001\002\000\012\002\ufffc" +
                          "\003\ufffc\023\ufffc\024\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table =
          unpackFromStrings(new String[] {
                  "\000\134\000\006\002\007\003\006\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\006\002\011" +
                          "\003\006\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                          "\005\016\001\001\000\004\005\043\001\001\000\002\001" +
                          "\001\000\004\005\021\001\001\000\002\001\001\000\004" +
                          "\006\024\001\001\000\004\005\033\001\001\000\004\005" +
                          "\032\001\001\000\002\001\001\000\004\005\030\001\001" +
                          "\000\004\005\027\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\004\005\035\001\001\000\002\001\001\000\004\004" +
                          "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\004\005\052\001\001\000\002\001" +
                          "\001\000\004\005\054\001\001\000\002\001\001\000\004" +
                          "\005\056\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\005\063\001\001" +
                          "\000\002\001\001\000\004\005\065\001\001\000\002\001" +
                          "\001\000\004\005\067\001\001\000\002\001\001\000\004" +
                          "\005\071\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\005\076\001\001" +
                          "\000\002\001\001\000\004\005\100\001\001\000\002\001" +
                          "\001\000\004\005\102\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
                          "\107\001\001\000\002\001\001\000\004\005\111\001\001" +
                          "\000\002\001\001\000\004\005\113\001\001\000\002\001" +
                          "\001\000\004\005\115\001\001\000\002\001\001\000\004" +
                          "\005\117\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\005\124\001\001" +
                          "\000\002\001\001\000\004\005\126\001\001\000\002\001" +
                          "\001\000\004\005\130\001\001\000\002\001\001\000\004" +
                          "\005\132\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
  {
    action_obj = new CUP$parser$actions(this);
  }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
          int                        act_num,
          java_cup.runtime.lr_parser parser,
          java.util.Stack            stack,
          int                        top)
          throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  //Se instancia un listado de las figuras a graficar
  private ArrayList<Figura> listadoFiguras = new ArrayList();
  private ArrayList<TokenError> listadoErroresSintacticos = new ArrayList();
  private String[] mensajes = {" ",	//0
          " ",			//1
          "numero (0 a 9)",	//2
          "'+'",				//3
          "'-'",				//4
          "'*'",				//5
          "'/'",				//6
          "'('",				//7
          "')'",				//8
          "','",				//9
          "un color",			//10
          "curva", 			//11
          "circulo",			//12
          "cuadrado",			//13
          "rectangulo",		//14
          "linea",			//15
          "poligono",			//16
          "graficar",			//17
          "animar",			//18
          "objeto",			//19
          "anterior"};		//20

  //Controlador de error sintactico
  @Override
  public void syntax_error(Symbol a){
    System.out.println("error de sintaxis");
    String msgError = "Se esperaba: ";
    Token tokenError = (Token) a.value;//lo transformamos en token para obtener su lexema, fila y columna

    for(int i = 0; i < expected_token_ids().size(); i++){
      msgError = msgError + mensajes[expected_token_ids().get(i)];
      if(i < expected_token_ids().size() - 1)
        msgError = msgError + ", ";
    }
    //recibe tipo error, lexema error, mensaje, linea, columna
    TokenError tokenErrorAux = new TokenError("SINTACTICO", tokenError.getLexema(), msgError, tokenError.getLinea(), tokenError.getColumna());
    listadoErroresSintacticos.add(tokenErrorAux);

  }

  public ArrayList<Figura> getListadoFiguras(){
    return listadoFiguras;
  }

  public ArrayList<TokenError> getListadoErroresSintacticos(){
    return listadoErroresSintacticos;
  }


  public parser(exercise lex){
    super(lex);
  }


  /** Cup generated class to encapsulate user supplied action code.*/
  @SuppressWarnings({"rawtypes", "unchecked", "unused"})
  class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
      this.parser = parser;
    }

    /** Method 0 with the actual generated action code for actions 0 to 300. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack            CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
      {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= s EOF
        {
          Object RESULT =null;
          int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
          int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
          Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
          RESULT = start_val;
          CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        /* ACCEPT */
        CUP$parser$parser.done_parsing();
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // s ::= graficar
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // s ::= graficar s
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // graficar ::= GRAFICAR CIRCULO PARENTESISA producto COMA producto COMA producto COMA COLOR PARENTESISB
        {
          Object RESULT =null;
          int posXleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
          int posXright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
          String posX = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
          int posYleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
          int posYright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
          String posY = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
          int radioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
          int radioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
          String radio = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
          int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
          int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
          Token color = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

          Figura aux = new Circulo(color.getLexema(),
                  Double.parseDouble(posX),
                  Double.parseDouble(posY),
                  Double.parseDouble(radio));
          listadoFiguras.add(aux);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("graficar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // graficar ::= GRAFICAR CUADRADO PARENTESISA producto COMA producto COMA producto COMA COLOR PARENTESISB
        {
          Object RESULT =null;
          int posXleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
          int posXright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
          String posX = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
          int posYleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
          int posYright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
          String posY = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
          int longitudLadoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
          int longitudLadoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
          String longitudLado = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
          int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
          int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
          Token color = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

          Figura aux = new Cuadrado(color.getLexema(),
                  Double.parseDouble(posX),
                  Double.parseDouble(posY),
                  Double.parseDouble(longitudLado));
          listadoFiguras.add(aux);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("graficar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // graficar ::= GRAFICAR RECTANGULO PARENTESISA producto COMA producto COMA producto COMA producto COMA COLOR PARENTESISB
        {
          Object RESULT =null;
          int posXleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
          int posXright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
          String posX = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
          int posYleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
          int posYright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
          String posY = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
          int altoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
          int altoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
          String alto = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
          int ancholeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
          int anchoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
          String ancho = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
          int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
          int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
          Token color = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

          Figura aux = new Rectangulo(color.getLexema(),
                  Double.parseDouble(posX),
                  Double.parseDouble(posY),
                  Double.parseDouble(alto),
                  Double.parseDouble(ancho));
          listadoFiguras.add(aux);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("graficar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // graficar ::= GRAFICAR LINEA PARENTESISA producto COMA producto COMA producto COMA producto COMA COLOR PARENTESISB
        {
          Object RESULT =null;
          int posXleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
          int posXright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
          String posX = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
          int posYleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
          int posYright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
          String posY = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
          int posX1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
          int posX1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
          String posX1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
          int posY1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
          int posY1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
          String posY1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
          int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
          int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
          Token color = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

          Figura aux = new Linea(color.getLexema(),
                  Double.parseDouble(posX),
                  Double.parseDouble(posY),
                  Double.parseDouble(posX1),
                  Double.parseDouble(posY1));
          listadoFiguras.add(aux);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("graficar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // graficar ::= GRAFICAR POLIGONO PARENTESISA producto COMA producto COMA producto COMA producto COMA producto COMA COLOR PARENTESISB
        {
          Object RESULT =null;
          int posXleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
          int posXright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
          String posX = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
          int posYleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
          int posYright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
          String posY = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
          int altoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
          int altoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
          String alto = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
          int ancholeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
          int anchoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
          String ancho = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
          int cantidadLadosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
          int cantidadLadosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
          String cantidadLados = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
          int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
          int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
          Token color = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

          Figura aux = new Poligono(color.getLexema(),
                  Double.parseDouble(posX),
                  Double.parseDouble(posY),
                  Double.parseDouble(alto),
                  Double.parseDouble(ancho),
                  Double.parseDouble(cantidadLados));
          listadoFiguras.add(aux);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("graficar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // graficar ::= ANIMAR OBJETO ANTERIOR PARENTESISA producto COMA producto COMA tipoanimacion PARENTESISB
        {
          Object RESULT =null;

          //CODIGO ANIMAR FIGURA


          CUP$parser$result = parser.getSymbolFactory().newSymbol("graficar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // graficar ::= error
        {
          Object RESULT =null;
          System.out.println(" Error sintactico del grupo de tokens para graficar figuras ");
          CUP$parser$result = parser.getSymbolFactory().newSymbol("graficar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // producto ::= producto SUMA producto
        {
          String RESULT =null;
          int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
          int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
          String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
          int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

          //System.out.print(" + ");
          Double num1 = Double.parseDouble(n1);
          Double num2 = Double.parseDouble(n2);
          Double aux = num1 + num2;
          RESULT = String.valueOf(aux);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("producto",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // producto ::= producto RESTA producto
        {
          String RESULT =null;
          int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
          int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
          String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
          int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

          //System.out.print(" - ");
          Double num1 = Double.parseDouble(n1);
          Double num2 = Double.parseDouble(n2);
          Double aux = num1 - num2;
          RESULT = String.valueOf(aux);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("producto",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // producto ::= producto MULTIPLICACION producto
        {
          String RESULT =null;
          int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
          int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
          String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
          int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

          //System.out.print(" * ");
          Double num1 = Double.parseDouble(n1);
          Double num2 = Double.parseDouble(n2);
          Double aux = num1 * num2;
          RESULT = String.valueOf(aux);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("producto",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // producto ::= producto DIVISION producto
        {
          String RESULT =null;
          int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
          int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
          String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
          int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

          //System.out.print(" / ");
          Double num1 = Double.parseDouble(n1);
          Double num2 = Double.parseDouble(n2);
          Double aux = num1 / num2;
          RESULT = String.valueOf(aux);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("producto",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // NT$0 ::=
        {
          String RESULT =null;
          int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

          //System.out.print(" ( )");
          RESULT = p;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // producto ::= PARENTESISA producto NT$0 PARENTESISB
        {
          String RESULT =null;
          // propagate RESULT from NT$0
          RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
          int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
          int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
          String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("producto",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // producto ::= ENTERO
        {
          String RESULT =null;
          int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

          //System.out.print(" Entero");
          RESULT = e.getLexema();

          CUP$parser$result = parser.getSymbolFactory().newSymbol("producto",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // producto ::= RESTA producto
        {
          String RESULT =null;
          int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

          //System.out.print(" Entero negativo ");
          double auxNum = Double.parseDouble(n1);
          auxNum = auxNum * -1; //le cambiamos el signo
          RESULT = Double.toString(auxNum); //transofmramos a String y lo pasamos al result

          CUP$parser$result = parser.getSymbolFactory().newSymbol("producto",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // tipoanimacion ::= LINEA
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoanimacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // tipoanimacion ::= CURVA
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoanimacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /* . . . . . .*/
        default:
          throw new Exception(
                  "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

      }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack            CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception
    {
      return CUP$parser$do_action_part00000000(
              CUP$parser$act_num,
              CUP$parser$parser,
              CUP$parser$stack,
              CUP$parser$top);
    }
  }

}